// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// Defines values for GetSensorDataRequestMetricName.
const (
	GetSensorDataRequestMetricNameCurrent     GetSensorDataRequestMetricName = "current"
	GetSensorDataRequestMetricNameFlowRate    GetSensorDataRequestMetricName = "flow_rate"
	GetSensorDataRequestMetricNameHumidity    GetSensorDataRequestMetricName = "humidity"
	GetSensorDataRequestMetricNamePower       GetSensorDataRequestMetricName = "power"
	GetSensorDataRequestMetricNamePressure    GetSensorDataRequestMetricName = "pressure"
	GetSensorDataRequestMetricNameTemperature GetSensorDataRequestMetricName = "temperature"
	GetSensorDataRequestMetricNameVibration   GetSensorDataRequestMetricName = "vibration"
	GetSensorDataRequestMetricNameVoltage     GetSensorDataRequestMetricName = "voltage"
)

// Defines values for SensorDataMetricName.
const (
	SensorDataMetricNameCurrent     SensorDataMetricName = "current"
	SensorDataMetricNameFlowRate    SensorDataMetricName = "flow_rate"
	SensorDataMetricNameHumidity    SensorDataMetricName = "humidity"
	SensorDataMetricNamePower       SensorDataMetricName = "power"
	SensorDataMetricNamePressure    SensorDataMetricName = "pressure"
	SensorDataMetricNameTemperature SensorDataMetricName = "temperature"
	SensorDataMetricNameVibration   SensorDataMetricName = "vibration"
	SensorDataMetricNameVoltage     SensorDataMetricName = "voltage"
)

// BatchSensorReadWriteData defines model for BatchSensorReadWriteData.
type BatchSensorReadWriteData struct {
	// Results 每个数据项的处理结果
	Results *[]SensorReadWriteData `json:"results,omitempty"`

	// Status 批量操作状态
	Status *string `json:"status,omitempty"`

	// TotalAlerts 总告警数量
	TotalAlerts *int `json:"total_alerts,omitempty"`

	// TotalProcessed 总处理数量
	TotalProcessed *int `json:"total_processed,omitempty"`
}

// BatchSensorReadWriteRequest defines model for BatchSensorReadWriteRequest.
type BatchSensorReadWriteRequest struct {
	// Data 批量传感器数据数组
	Data []SensorReadWriteRequest `json:"data"`
}

// GetSensorDataData defines model for GetSensorDataData.
type GetSensorDataData struct {
	// Count 实际返回的记录数
	Count *int `json:"count,omitempty"`

	// Data 传感器数据列表
	Data *[]SensorDataRecord `json:"data,omitempty"`

	// DeviceId 设备唯一标识符
	DeviceId *string `json:"device_id,omitempty"`

	// EndTime 查询结束时间
	EndTime *time.Time `json:"end_time,omitempty"`

	// Limit 返回记录数限制
	Limit *int `json:"limit,omitempty"`

	// MetricName 指标名称（如果指定了特定指标）
	MetricName *string `json:"metric_name,omitempty"`

	// Offset 分页偏移量
	Offset *int `json:"offset,omitempty"`

	// StartTime 查询开始时间
	StartTime *time.Time `json:"start_time,omitempty"`

	// Status 操作状态
	Status *string `json:"status,omitempty"`

	// TotalCount 符合条件的总记录数
	TotalCount *int64 `json:"total_count,omitempty"`
}

// GetSensorDataRequest defines model for GetSensorDataRequest.
type GetSensorDataRequest struct {
	// DeviceId 设备唯一标识符
	DeviceId string `json:"device_id"`

	// EndTime 查询结束时间（RFC3339格式）
	EndTime time.Time `json:"end_time"`

	// Limit 返回记录数限制（默认1000，最大10000）
	Limit *int `json:"limit,omitempty"`

	// MetricName 指标名称（可选，不指定则查询所有指标）
	MetricName *GetSensorDataRequestMetricName `json:"metric_name,omitempty"`

	// Offset 分页偏移量（默认0）
	Offset *int `json:"offset,omitempty"`

	// StartTime 查询开始时间（RFC3339格式）
	StartTime time.Time `json:"start_time"`
}

// GetSensorDataRequestMetricName 指标名称（可选，不指定则查询所有指标）
type GetSensorDataRequestMetricName string

// HealthData defines model for HealthData.
type HealthData struct {
	// Status 健康状态
	Status *string `json:"status,omitempty"`

	// Time 当前时间
	Time *time.Time `json:"time,omitempty"`
}

// SensorData defines model for SensorData.
type SensorData struct {
	// Data 随机负载数据，用于增大传输量进行压测
	Data *string `json:"data,omitempty"`

	// DeviceId 设备唯一标识符
	DeviceId string `json:"device_id"`

	// MetricName 指标名称
	MetricName SensorDataMetricName `json:"metric_name"`

	// Priority 优先级（1:高 2:中 3:低）
	Priority *int `json:"priority,omitempty"`

	// Timestamp 传感器数据时间戳（RFC3339格式）
	Timestamp time.Time `json:"timestamp"`

	// Value 传感器数值
	Value float64 `json:"value"`
}

// SensorDataMetricName 指标名称
type SensorDataMetricName string

// SensorDataRecord defines model for SensorDataRecord.
type SensorDataRecord struct {
	// CreatedAt 记录创建时间
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// DataLength 完整负载数据长度
	DataLength *int `json:"data_length,omitempty"`

	// DataPreview 负载数据预览（前100个字符）
	DataPreview *string `json:"data_preview,omitempty"`

	// DeviceId 设备唯一标识符
	DeviceId *string `json:"device_id,omitempty"`

	// Id 记录ID
	Id *int64 `json:"id,omitempty"`

	// MetricName 指标名称
	MetricName *string `json:"metric_name,omitempty"`

	// Priority 优先级（1:高 2:中 3:低）
	Priority *int `json:"priority,omitempty"`

	// Timestamp 传感器数据时间戳
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// Value 传感器数值
	Value *float64 `json:"value,omitempty"`
}

// SensorReadWriteData defines model for SensorReadWriteData.
type SensorReadWriteData struct {
	// Alert 告警信息（可选）
	Alert *string `json:"alert,omitempty"`

	// DeviceId 设备唯一标识符
	DeviceId *string `json:"device_id,omitempty"`

	// MetricName 指标名称
	MetricName *string `json:"metric_name,omitempty"`

	// NewValue 新的数值
	NewValue *float64 `json:"new_value,omitempty"`

	// PreviousValue 之前的数值
	PreviousValue *float64 `json:"previous_value,omitempty"`

	// Priority 优先级
	Priority *int `json:"priority,omitempty"`

	// Status 操作状态
	Status *string `json:"status,omitempty"`

	// Timestamp 时间戳
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// SensorReadWriteRequest defines model for SensorReadWriteRequest.
type SensorReadWriteRequest struct {
	// Data 随机负载数据，用于增大传输量进行压测
	Data *string `json:"data,omitempty"`

	// DeviceId 设备唯一标识符
	DeviceId string `json:"device_id"`

	// MetricName 指标名称
	MetricName string `json:"metric_name"`

	// NewValue 新的传感器数值
	NewValue float64 `json:"new_value"`

	// Priority 优先级（1:高 2:中 3:低）
	Priority *int `json:"priority,omitempty"`

	// Timestamp 时间戳（RFC3339格式）
	Timestamp time.Time `json:"timestamp"`
}

// StatsData defines model for StatsData.
type StatsData struct {
	// PriorityStats 按优先级统计
	PriorityStats *map[string]int64 `json:"priority_stats,omitempty"`

	// Recent24hCount 最近24小时数据量
	Recent24hCount *int64 `json:"recent_24h_count,omitempty"`

	// TotalRecords 总记录数
	TotalRecords *int64 `json:"total_records,omitempty"`
}

// SuccessData defines model for SuccessData.
type SuccessData struct {
	// Message 操作信息
	Message *string `json:"message,omitempty"`

	// Status 操作状态
	Status *string `json:"status,omitempty"`
}

// BatchSensorReadWriteJSONRequestBody defines body for BatchSensorReadWrite for application/json ContentType.
type BatchSensorReadWriteJSONRequestBody = BatchSensorReadWriteRequest

// GetSensorDataJSONRequestBody defines body for GetSensorData for application/json ContentType.
type GetSensorDataJSONRequestBody = GetSensorDataRequest

// UploadSensorDataJSONRequestBody defines body for UploadSensorData for application/json ContentType.
type UploadSensorDataJSONRequestBody = SensorData

// SensorReadWriteJSONRequestBody defines body for SensorReadWrite for application/json ContentType.
type SensorReadWriteJSONRequestBody = SensorReadWriteRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// BatchSensorReadWriteWithBody request with any body
	BatchSensorReadWriteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BatchSensorReadWrite(ctx context.Context, body BatchSensorReadWriteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSensorDataWithBody request with any body
	GetSensorDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetSensorData(ctx context.Context, body GetSensorDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadSensorDataWithBody request with any body
	UploadSensorDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UploadSensorData(ctx context.Context, body UploadSensorDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SensorReadWriteWithBody request with any body
	SensorReadWriteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SensorReadWrite(ctx context.Context, body SensorReadWriteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStats request
	GetStats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HealthCheck request
	HealthCheck(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) BatchSensorReadWriteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchSensorReadWriteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchSensorReadWrite(ctx context.Context, body BatchSensorReadWriteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchSensorReadWriteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSensorDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSensorDataRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSensorData(ctx context.Context, body GetSensorDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSensorDataRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadSensorDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadSensorDataRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadSensorData(ctx context.Context, body UploadSensorDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadSensorDataRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SensorReadWriteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSensorReadWriteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SensorReadWrite(ctx context.Context, body SensorReadWriteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSensorReadWriteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HealthCheck(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHealthCheckRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewBatchSensorReadWriteRequest calls the generic BatchSensorReadWrite builder with application/json body
func NewBatchSensorReadWriteRequest(server string, body BatchSensorReadWriteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBatchSensorReadWriteRequestWithBody(server, "application/json", bodyReader)
}

// NewBatchSensorReadWriteRequestWithBody generates requests for BatchSensorReadWrite with any type of body
func NewBatchSensorReadWriteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/batch-sensor-rw")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSensorDataRequest calls the generic GetSensorData builder with application/json body
func NewGetSensorDataRequest(server string, body GetSensorDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetSensorDataRequestWithBody(server, "application/json", bodyReader)
}

// NewGetSensorDataRequestWithBody generates requests for GetSensorData with any type of body
func NewGetSensorDataRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/get-sensor-data")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUploadSensorDataRequest calls the generic UploadSensorData builder with application/json body
func NewUploadSensorDataRequest(server string, body UploadSensorDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUploadSensorDataRequestWithBody(server, "application/json", bodyReader)
}

// NewUploadSensorDataRequestWithBody generates requests for UploadSensorData with any type of body
func NewUploadSensorDataRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sensor-data")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSensorReadWriteRequest calls the generic SensorReadWrite builder with application/json body
func NewSensorReadWriteRequest(server string, body SensorReadWriteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSensorReadWriteRequestWithBody(server, "application/json", bodyReader)
}

// NewSensorReadWriteRequestWithBody generates requests for SensorReadWrite with any type of body
func NewSensorReadWriteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sensor-rw")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStatsRequest generates requests for GetStats
func NewGetStatsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/stats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHealthCheckRequest generates requests for HealthCheck
func NewHealthCheckRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// BatchSensorReadWriteWithBodyWithResponse request with any body
	BatchSensorReadWriteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BatchSensorReadWriteResponse, error)

	BatchSensorReadWriteWithResponse(ctx context.Context, body BatchSensorReadWriteJSONRequestBody, reqEditors ...RequestEditorFn) (*BatchSensorReadWriteResponse, error)

	// GetSensorDataWithBodyWithResponse request with any body
	GetSensorDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSensorDataResponse, error)

	GetSensorDataWithResponse(ctx context.Context, body GetSensorDataJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSensorDataResponse, error)

	// UploadSensorDataWithBodyWithResponse request with any body
	UploadSensorDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadSensorDataResponse, error)

	UploadSensorDataWithResponse(ctx context.Context, body UploadSensorDataJSONRequestBody, reqEditors ...RequestEditorFn) (*UploadSensorDataResponse, error)

	// SensorReadWriteWithBodyWithResponse request with any body
	SensorReadWriteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SensorReadWriteResponse, error)

	SensorReadWriteWithResponse(ctx context.Context, body SensorReadWriteJSONRequestBody, reqEditors ...RequestEditorFn) (*SensorReadWriteResponse, error)

	// GetStatsWithResponse request
	GetStatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatsResponse, error)

	// HealthCheckWithResponse request
	HealthCheckWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthCheckResponse, error)
}

type BatchSensorReadWriteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BatchSensorReadWriteData
}

// Status returns HTTPResponse.Status
func (r BatchSensorReadWriteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BatchSensorReadWriteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSensorDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetSensorDataData
}

// Status returns HTTPResponse.Status
func (r GetSensorDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSensorDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadSensorDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SuccessData
}

// Status returns HTTPResponse.Status
func (r UploadSensorDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadSensorDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SensorReadWriteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SensorReadWriteData
}

// Status returns HTTPResponse.Status
func (r SensorReadWriteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SensorReadWriteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatsData
}

// Status returns HTTPResponse.Status
func (r GetStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HealthCheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HealthData
}

// Status returns HTTPResponse.Status
func (r HealthCheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HealthCheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// BatchSensorReadWriteWithBodyWithResponse request with arbitrary body returning *BatchSensorReadWriteResponse
func (c *ClientWithResponses) BatchSensorReadWriteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BatchSensorReadWriteResponse, error) {
	rsp, err := c.BatchSensorReadWriteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchSensorReadWriteResponse(rsp)
}

func (c *ClientWithResponses) BatchSensorReadWriteWithResponse(ctx context.Context, body BatchSensorReadWriteJSONRequestBody, reqEditors ...RequestEditorFn) (*BatchSensorReadWriteResponse, error) {
	rsp, err := c.BatchSensorReadWrite(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchSensorReadWriteResponse(rsp)
}

// GetSensorDataWithBodyWithResponse request with arbitrary body returning *GetSensorDataResponse
func (c *ClientWithResponses) GetSensorDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSensorDataResponse, error) {
	rsp, err := c.GetSensorDataWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSensorDataResponse(rsp)
}

func (c *ClientWithResponses) GetSensorDataWithResponse(ctx context.Context, body GetSensorDataJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSensorDataResponse, error) {
	rsp, err := c.GetSensorData(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSensorDataResponse(rsp)
}

// UploadSensorDataWithBodyWithResponse request with arbitrary body returning *UploadSensorDataResponse
func (c *ClientWithResponses) UploadSensorDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadSensorDataResponse, error) {
	rsp, err := c.UploadSensorDataWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadSensorDataResponse(rsp)
}

func (c *ClientWithResponses) UploadSensorDataWithResponse(ctx context.Context, body UploadSensorDataJSONRequestBody, reqEditors ...RequestEditorFn) (*UploadSensorDataResponse, error) {
	rsp, err := c.UploadSensorData(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadSensorDataResponse(rsp)
}

// SensorReadWriteWithBodyWithResponse request with arbitrary body returning *SensorReadWriteResponse
func (c *ClientWithResponses) SensorReadWriteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SensorReadWriteResponse, error) {
	rsp, err := c.SensorReadWriteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSensorReadWriteResponse(rsp)
}

func (c *ClientWithResponses) SensorReadWriteWithResponse(ctx context.Context, body SensorReadWriteJSONRequestBody, reqEditors ...RequestEditorFn) (*SensorReadWriteResponse, error) {
	rsp, err := c.SensorReadWrite(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSensorReadWriteResponse(rsp)
}

// GetStatsWithResponse request returning *GetStatsResponse
func (c *ClientWithResponses) GetStatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatsResponse, error) {
	rsp, err := c.GetStats(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatsResponse(rsp)
}

// HealthCheckWithResponse request returning *HealthCheckResponse
func (c *ClientWithResponses) HealthCheckWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthCheckResponse, error) {
	rsp, err := c.HealthCheck(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHealthCheckResponse(rsp)
}

// ParseBatchSensorReadWriteResponse parses an HTTP response from a BatchSensorReadWriteWithResponse call
func ParseBatchSensorReadWriteResponse(rsp *http.Response) (*BatchSensorReadWriteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BatchSensorReadWriteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BatchSensorReadWriteData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSensorDataResponse parses an HTTP response from a GetSensorDataWithResponse call
func ParseGetSensorDataResponse(rsp *http.Response) (*GetSensorDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSensorDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSensorDataData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUploadSensorDataResponse parses an HTTP response from a UploadSensorDataWithResponse call
func ParseUploadSensorDataResponse(rsp *http.Response) (*UploadSensorDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadSensorDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SuccessData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSensorReadWriteResponse parses an HTTP response from a SensorReadWriteWithResponse call
func ParseSensorReadWriteResponse(rsp *http.Response) (*SensorReadWriteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SensorReadWriteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SensorReadWriteData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStatsResponse parses an HTTP response from a GetStatsWithResponse call
func ParseGetStatsResponse(rsp *http.Response) (*GetStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatsData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseHealthCheckResponse parses an HTTP response from a HealthCheckWithResponse call
func ParseHealthCheckResponse(rsp *http.Response) (*HealthCheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HealthCheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HealthData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
